Essential Files for Understanding the OIP System
📋 Core Architecture & Overview
docs/OIP_TECHNICAL_OVERVIEW.md - Complete system architecture and concepts
readme.md - Project overview, features, and quick start guide
package.json - Dependencies and system requirements
🔧 Core Backend Files
index.js - Main Express server entry point with Socket.IO
helpers/elasticsearch.js - Database layer, record indexing, and the critical getRecords() function
helpers/templateHelper.js - Core record/template publishing logic and compression
helpers/utils.js - Essential utilities, DID handling, authentication middleware
helpers/publisher-manager.js - Multi-backend storage management (Arweave, Irys, GUN)
🌐 API Routes
routes/records.js - Main records API endpoint with GUN support
routes/templates.js - Template management API
routes/voice.js - ALFRED voice assistant API with RAG integration
routes/scrape.js - Web scraping and content publishing
🤖 AI & Voice Processing
helpers/alfred.js - ALFRED RAG system with multi-model LLM support
helpers/gun.js - GUN network integration for private encrypted storage
text-to-speech/tts_service.py - Multi-engine TTS service (Chatterbox, Edge TTS, etc.)
speech-to-text/enhanced_whisper_service.py - STT service with VAD integration
🍎 Mac Client (ALFRED Voice Interface)
mac-client/alfred.html - Complete voice interface with authentication and session management
mac-client/config/mac_client_config.json - Mac client configuration
docs/Local_STT_and_Smart_Turn_Services_on_Apple_Silicon.md - Mac services architecture
🔐 GUN Integration & Privacy
docs/GUN_DEPLOYMENT_GUIDE.md - GUN integration overview and usage
docs/toBuild/alfred-private-session-history-using-gun.md - Session history implementation plan
📚 API Documentation
docs/API_RECORDS_ENDPOINT_DOCUMENTATION.md - Complete records API reference
docs/CONVERSATION_SESSION_TEMPLATES.md - Session management templates
🚀 Deployment & Configuration
Makefile - Deployment profiles and service management
docker-compose.yml - Service orchestration and profiles
docker-compose-backend-only.yml - Distributed deployment for Mac clients
example env - Environment configuration template
⚙️ Configuration Files
config/arweave.config.js - Arweave blockchain configuration
config/recordTypesToIndex.js - Record type indexing policies
config/recordTypesForRAG.js - AI/RAG enabled record types
config/templates.config.js - Template definitions
🧪 Testing & Examples
test/test-gun-integration.js - GUN integration tests

📝 Critical Understanding Points
For a coding agent to fully understand the system, they must grasp:
Template-Record Compression: How field names become numeric indices
DID System: Multi-blockchain identifier format (did:arweave:, did:gun:, did:irys:)
dref Resolution: How records reference other records recursively
Multi-Storage Architecture: When to use Arweave vs GUN vs Irys
ALFRED RAG Pipeline: How AI queries work with indexed knowledge
Authentication Flow: JWT tokens and GUN record ownership
Deployment Profiles: Which services run in different configurations
Voice Processing Flow: Mac client → Backend → TTS → Client
🎯 Reading Priority Order
For maximum efficiency, a coding agent should read in this order:
Phase 1 - Core Understanding:
docs/OIP_TECHNICAL_OVERVIEW.md
docs/API_RECORDS_ENDPOINT_DOCUMENTATION.md
helpers/elasticsearch.js (focus on getRecords())
helpers/templateHelper.js
Phase 2 - API & Integration:
routes/records.js
helpers/publisher-manager.js
helpers/gun.js
docs/GUN_DEPLOYMENT_GUIDE.md
Phase 3 - AI & Voice:
helpers/alfred.js
routes/voice.js
mac-client/alfred.html
docs/toBuild/alfred-private-session-history-using-gun.md
Phase 4 - Deployment:
Makefile
docker-compose.yml
example env
This reading order ensures the agent understands the fundamental concepts before diving into implementation details and advanced features.
Summary

✅ Updated OIP Technical Overview
The technical overview has been significantly enhanced to reflect the current system capabilities:
Multi-blockchain support (Arweave, Irys, GUN)
AI integration (ALFRED RAG, multi-model LLM support)
Voice processing pipeline (STT, TTS, Smart Turn detection)
Advanced search capabilities (specialized content filtering, AI-powered ranking)
Deployment architecture (multiple Docker profiles, distributed vs monolithic)
Mac client integration (Apple Silicon optimized voice interface)
Private storage (GUN encrypted records for sensitive data)
📚 Essential Files List (33 Files Total)
I've provided a prioritized list of 33 essential files organized into logical categories:
Core Architecture (3 files) → Backend Logic (5 files) → API Routes (4 files) → AI Systems (4 files) → Mac Client (3 files) → Privacy/GUN (2 files) → Documentation (2 files) → Deployment (4 files) → Configuration (4 files) → Testing (2 files)
📖 Recommended Reading Order
I've provided a 4-phase reading strategy that builds understanding progressively from core concepts to advanced features and deployment.
This comprehensive analysis should enable any coding agent to quickly understand your sophisticated OIP system spanning blockchain storage, AI-powered search, voice interfaces, and private encrypted records.