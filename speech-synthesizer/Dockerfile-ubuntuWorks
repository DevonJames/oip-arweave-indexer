# Use a CUDA-enabled Python image (CUDA 11.7 with Python 3.10)
FROM nvidia/cuda:11.7.1-cudnn8-runtime-ubuntu20.04

# Set environment variables to bypass prompts (adjust TZ to your timezone)
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    python3-dev \
    curl \
    git \
    python3 \
    python3-pip \
    cython \
    chromium-browser \
    chromium-driver \
    libnss3 \
    libx11-xcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxi6 \
    libxtst6 \
    libxrandr2 \
    libasound2 \
    libatk-bridge2.0-0 \
    libatspi2.0-0 \
    libgtk-3-0 \
    libgbm1 \
    libglib2.0-0 \
    libnspr4 \
    libffi-dev \
    libsoxr-dev \
    zlib1g-dev \
    libjpeg-dev \
    libtiff-dev \
    libfreetype6-dev \
    && rm -rf /var/lib/apt/lists/*

# Upgrade pip, setuptools, and wheel
RUN python3 -m pip install --upgrade pip setuptools wheel

# Install Pillow with its dependencies
RUN python3 -m pip install pillow==9.3.0

# Install compatible versions of NumPy, pandas, and related packages
RUN python3 -m pip install numpy==1.21.6 pandas==1.3.3 numba scipy==1.7.1 cffi==1.14.6 llvmlite==0.36.0 soxr librosa matplotlib==3.4.3

# Install PyTorch and Spacy
RUN python3 -m pip install torch torchvision torchaudio wheel cython spacy==3.2.0

# Install Rust for compiling dependencies like sudachipy
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:${PATH}"

# Set the path to LLVM to ensure llvmlite can find it
ENV LD_LIBRARY_PATH=/usr/lib/llvm-10/lib

# Install dependencies including PyYAML
RUN python3 -m pip install pyyaml

# Install necessary Python dependencies, including coqpit
RUN python3 -m pip install coqpit

# Install Coqui TTS with the no-build-isolation flag
RUN python3 -m pip install --no-deps TTS transformers

# Install 'trainer' package for TTS
RUN python3 -m pip install trainer

# Install 'pysbd' as it is required by TTS
RUN python3 -m pip install pysbd anyascii bangla bnnumerizer bnunicodenormalizer gruut jamo jieba pypinyin

# Ensure Python uses the GPU for TTS
ENV CUDA_VISIBLE_DEVICES=0

# Ensure /root/.local/share/tts exists
RUN mkdir -p /root/.local/share/tts/

# Copy the model file into the container
COPY models/tts_models--en--jenny--jenny.zip /root/.local/share/tts/

# Unzip the model within the container
RUN apt-get update && apt-get install -y unzip && \
    unzip /root/.local/share/tts/tts_models--en--jenny--jenny.zip -d /root/.local/share/tts/ && \
    rm /root/.local/share/tts/tts_models--en--jenny--jenny.zip

# Install MeCab system package and set up mecabrc config file link
RUN apt-get update && apt-get install -y mecab libmecab-dev mecab-ipadic-utf8 && \
    ln -s /etc/mecabrc /usr/local/etc/mecabrc && \
    rm -rf /var/lib/apt/lists/*

# Install MeCab Python bindings
RUN python3 -m pip install mecab-python3

# Verify that mecabrc is in the expected location for MeCab
RUN ls -l /usr/local/etc/mecabrc

# Install Flask for API handling
RUN python3 -m pip install flask

# After RUN python3 -m pip install TTS==0.4.0 in your Dockerfile, add a command to list installed packages
RUN python3 -m pip list | grep TTS

# Set the PYTHONPATH to include your application files
ENV PYTHONPATH="/usr/local/lib/python3.8/dist-packages/:${PYTHONPATH}"

# Copy your project files into the Docker container
WORKDIR /app
COPY . .

# Copy pre-installed Python packages from the virtual environment (site-packages)
# COPY ./myenv/lib/python3.10/site-packages /app/site-packages

# Remove potentially incompatible PyTorch, NumPy, SciPy, and cffi versions
# RUN rm -rf /app/site-packages/numpy /app/site-packages/torch /app/site-packages/torchaudio /app/site-packages/torchvision /app/site-packages/scipy /app/site-packages/cffi /app/site-packages/_cffi_backend /app/site-packages/numba /app/site-packages/llvmlite /app/site-packages/soxr /app/site-packages/soxr_ext /app/site-packages/pandas /app/site-packages/matplotlib


# Set the PYTHONPATH to include your application files
ENV PYTHONPATH=/app

# Expose the port your application will run on
EXPOSE 8082

# Set the command to run your application
CMD ["python3", "coqui_tts.py"]
