#!/bin/bash

# Backend Configuration Utility
# Centrally configure backend IP and port for distributed architecture

set -e

echo "🔧 Enhanced Voice Pipeline - Backend Configuration"
echo "================================================="
echo ""

# Function to detect current IP
detect_ip() {
    # Try different methods to get IP address
    IP=""
    
    # Method 1: hostname -I (Linux)
    if command -v hostname >/dev/null 2>&1; then
        IP=$(hostname -I 2>/dev/null | awk '{print $1}' || echo "")
    fi
    
    # Method 2: ifconfig (macOS/Linux)
    if [ -z "$IP" ] && command -v ifconfig >/dev/null 2>&1; then
        IP=$(ifconfig | grep -E "inet [0-9]" | grep -v 127.0.0.1 | head -1 | awk '{print $2}' || echo "")
    fi
    
    # Method 3: ip route (Linux)
    if [ -z "$IP" ] && command -v ip >/dev/null 2>&1; then
        IP=$(ip route get 1.1.1.1 2>/dev/null | grep -oP 'src \K\S+' || echo "")
    fi
    
    echo "$IP"
}

# Get current configuration
if [ -f ".env" ]; then
    CURRENT_HOST=$(grep "^BACKEND_HOST=" .env 2>/dev/null | cut -d'=' -f2 || echo "")
    CURRENT_PORT=$(grep "^BACKEND_PORT=" .env 2>/dev/null | cut -d'=' -f2 || echo "")
    CURRENT_PROTOCOL=$(grep "^BACKEND_PROTOCOL=" .env 2>/dev/null | cut -d'=' -f2 || echo "")
else
    CURRENT_HOST=""
    CURRENT_PORT=""
    CURRENT_PROTOCOL=""
fi

# Detect IP address
DETECTED_IP=$(detect_ip)

echo "🔍 Current Configuration:"
echo "   Host: ${CURRENT_HOST:-not set}"
echo "   Port: ${CURRENT_PORT:-not set}"
echo "   Protocol: ${CURRENT_PROTOCOL:-not set}"
echo ""

if [ -n "$DETECTED_IP" ]; then
    echo "📡 Detected IP Address: $DETECTED_IP"
else
    echo "⚠️  Could not auto-detect IP address"
fi
echo ""

# Get user input
echo "📝 Enter new backend configuration:"
echo ""

# Host
read -p "Backend Host [${DETECTED_IP:-192.168.1.100}]: " NEW_HOST
NEW_HOST=${NEW_HOST:-${DETECTED_IP:-192.168.1.100}}

# Port
read -p "Backend Port [3000]: " NEW_PORT
NEW_PORT=${NEW_PORT:-3000}

# Protocol
echo "Protocol options:"
echo "  1) http (default)"
echo "  2) https"
read -p "Select protocol [1]: " PROTOCOL_CHOICE
case $PROTOCOL_CHOICE in
    2) NEW_PROTOCOL="https" ;;
    *) NEW_PROTOCOL="http" ;;
esac

echo ""
echo "🔧 New Configuration:"
echo "   Host: $NEW_HOST"
echo "   Port: $NEW_PORT" 
echo "   Protocol: $NEW_PROTOCOL"
echo "   Full URL: $NEW_PROTOCOL://$NEW_HOST:$NEW_PORT"
echo ""

read -p "Apply this configuration? [y/N]: " CONFIRM
if [[ "$CONFIRM" != "y" && "$CONFIRM" != "Y" ]]; then
    echo "❌ Configuration cancelled"
    exit 0
fi

# Update or create .env file
echo "💾 Updating configuration..."

# Create backup if .env exists
if [ -f ".env" ]; then
    cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
    echo "✅ Backup created: .env.backup.$(date +%Y%m%d_%H%M%S)"
fi

# Update .env file
if [ -f ".env" ]; then
    # Update existing values or add if missing
    if grep -q "^BACKEND_HOST=" .env; then
        sed -i.tmp "s/^BACKEND_HOST=.*/BACKEND_HOST=$NEW_HOST/" .env && rm .env.tmp
    else
        echo "BACKEND_HOST=$NEW_HOST" >> .env
    fi
    
    if grep -q "^BACKEND_PORT=" .env; then
        sed -i.tmp "s/^BACKEND_PORT=.*/BACKEND_PORT=$NEW_PORT/" .env && rm .env.tmp
    else
        echo "BACKEND_PORT=$NEW_PORT" >> .env
    fi
    
    if grep -q "^BACKEND_PROTOCOL=" .env; then
        sed -i.tmp "s/^BACKEND_PROTOCOL=.*/BACKEND_PROTOCOL=$NEW_PROTOCOL/" .env && rm .env.tmp
    else
        echo "BACKEND_PROTOCOL=$NEW_PROTOCOL" >> .env
    fi
else
    # Create new .env file
    cat > .env << EOF
# Enhanced Voice Pipeline Configuration
# Generated by configure_backend.sh on $(date)

# Distributed Client Configuration
# For Mac/iOS clients connecting to backend
BACKEND_HOST=$NEW_HOST
BACKEND_PORT=$NEW_PORT
BACKEND_PROTOCOL=$NEW_PROTOCOL

# Add other configuration as needed...
EOF
fi

echo "✅ .env file updated"

# Update Mac client configuration if it exists
if [ -d "mac-client" ]; then
    echo "🍎 Updating Mac client configuration..."
    
    # Create .env from example if it doesn't exist
    if [ ! -f "mac-client/.env" ] && [ -f "mac-client/example.env" ]; then
        echo "📋 Creating mac-client/.env from example.env..."
        cp mac-client/example.env mac-client/.env
    fi
    
    if [ -f "mac-client/.env" ]; then
        # Update Mac client .env
        if grep -q "^BACKEND_HOST=" mac-client/.env; then
            sed -i.tmp "s/^BACKEND_HOST=.*/BACKEND_HOST=$NEW_HOST/" mac-client/.env && rm mac-client/.env.tmp
        else
            echo "BACKEND_HOST=$NEW_HOST" >> mac-client/.env
        fi
        
        if grep -q "^BACKEND_PORT=" mac-client/.env; then
            sed -i.tmp "s/^BACKEND_PORT=.*/BACKEND_PORT=$NEW_PORT/" mac-client/.env && rm mac-client/.env.tmp
        else
            echo "BACKEND_PORT=$NEW_PORT" >> mac-client/.env
        fi
        
        if grep -q "^BACKEND_PROTOCOL=" mac-client/.env; then
            sed -i.tmp "s/^BACKEND_PROTOCOL=.*/BACKEND_PROTOCOL=$NEW_PROTOCOL/" mac-client/.env && rm mac-client/.env.tmp
        else
            echo "BACKEND_PROTOCOL=$NEW_PROTOCOL" >> mac-client/.env
        fi
        
        echo "✅ Mac client .env updated"
    else
        echo "⚠️  Mac client .env not found, creating new one..."
        cat > mac-client/.env << EOF
# Mac Client Configuration
BACKEND_HOST=$NEW_HOST
BACKEND_PORT=$NEW_PORT
BACKEND_PROTOCOL=$NEW_PROTOCOL

# Mac Client Services Configuration
CLIENT_MODE=true
STT_PORT=8013
SMART_TURN_PORT=8014

# Apple Silicon Optimization
MLX_DEVICE=mps
WHISPER_MODEL=large-v3-turbo
MLX_QUANTIZATION=int4

# VAD Configuration
VAD_ENABLED=true
VAD_THRESHOLD=0.5
VAD_MIN_SPEECH_MS=200
VAD_MIN_SILENCE_MS=300

# Model Storage
MODEL_STORAGE_PATH=./models
CACHE_ENABLED=true

# Logging
LOG_LEVEL=INFO
LOG_FILE=logs/mac_client.log
EOF
        echo "✅ Mac client .env created"
    fi
    
    # Update Mac client config JSON if it exists
    if [ -f "mac-client/config/mac_client_config.json" ]; then
        # Use Python or Node.js to update JSON (safer than sed)
        if command -v python3 >/dev/null 2>&1; then
            python3 << EOF
import json
import sys

try:
    with open('mac-client/config/mac_client_config.json', 'r') as f:
        config = json.load(f)
    
    config['client']['backend']['host'] = '$NEW_HOST'
    config['client']['backend']['port'] = int('$NEW_PORT')
    config['client']['backend']['protocol'] = '$NEW_PROTOCOL'
    
    with open('mac-client/config/mac_client_config.json', 'w') as f:
        json.dump(config, f, indent=2)
    
    print('✅ Mac client config.json updated')
except Exception as e:
    print(f'⚠️  Could not update config.json: {e}')
EOF
        else
            echo "⚠️  Python not available, skipping config.json update"
            echo "   Please run: cd mac-client && ./setup_mac_client.sh"
        fi
    fi
fi

echo ""
echo "🎉 Configuration Complete!"
echo ""
echo "📋 Summary:"
echo "   Backend URL: $NEW_PROTOCOL://$NEW_HOST:$NEW_PORT"
echo "   Configuration saved to: .env"
if [ -d "mac-client" ]; then
    echo "   Mac client updated: mac-client/.env"
fi
echo ""
echo "📱 For iOS clients:"
echo "   The iOS app will automatically pick up these values"
echo "   when built/run from this environment"
echo ""
echo "🚀 Next Steps:"
echo "1. Start backend services:"
echo "   make backend-only"
echo "   # OR"
echo "   ./deploy-backend-only.sh"
echo ""
echo "2. Start Mac client (if using):"
echo "   cd mac-client && ./start_mac_client.sh"
echo ""
echo "3. Test connectivity:"
echo "   cd mac-client && ./test_mac_client.sh"
echo ""
echo "✅ Backend configuration is now centralized in .env file!"
