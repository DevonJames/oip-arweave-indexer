FROM node:20.11.1-alpine
ENV NODE_ENV=production
WORKDIR /usr/src/app

# Install necessary packages for all services
RUN apk add --no-cache bash make g++ python3 python3-dev py3-pip curl chromium

# Add dependencies for node-canvas
RUN apk add --no-cache \
    build-base \
    cairo-dev \
    pango-dev \
    jpeg-dev \
    giflib-dev \
    librsvg \
    pkgconfig

# Install Puppeteer
RUN npm install puppeteer-extra puppeteer-extra-plugin-stealth

# Install Python packages for LLaMA2 and Coqui TTS
RUN pip3 install torch transformers flask TTS

# Install app dependencies
COPY package*.json ./
RUN npm install --production --silent && mv node_modules ../

# Copy wait-for-it.sh script and make it executable
COPY wait-for-it.sh wait-for-it.sh
RUN chmod +x wait-for-it.sh

# Copy all application code including services
COPY . .

# Include all necessary directories
COPY config ./config
COPY helpers ./helpers
COPY lib ./lib
COPY remapTemplates ./remapTemplates
COPY routes ./routes
COPY speech-synthesizer ./speech-synthesizer
COPY text-generator ./text-generator
COPY ngrok ./ngrok

# Copy the .env file
COPY .env .env

# Expose all necessary ports
EXPOSE 3005
EXPOSE 9229
EXPOSE 8081
EXPOSE 8082
EXPOSE 4040

# Set permissions and switch to non-root user
RUN chown -R node /usr/src/app
USER node

# Rebuild native modules
RUN npm rebuild

# Command to run all services
CMD ["sh", "-c", "\
  ./wait-for-it.sh elasticsearch:9200 --timeout=90 --strict -- \
  ./wait-for-it.sh speech-synthesizer:8082 --timeout=600 --strict -- \
  ngrok start --config /usr/src/app/ngrok.yml & \
  python3 text-generator/llama_text_generator.py & \
  python3 speech-synthesizer/coqui_tts.py & \
  node --inspect=0.0.0.0:9229 index.js --keepDBUpToDate 10 100"]

# Add healthcheck for the app
HEALTHCHECK --interval=75s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:3005/api/health || exit 1 