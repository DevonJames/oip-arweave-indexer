version: "3.8"

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.8
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"      
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - oip-network
    restart: unless-stopped
    profiles:
      - full
      - standard
      - minimal

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.8
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      - ELASTICCLIENTHOST=http://elasticsearch:9200
    networks:
      - oip-network
    restart: unless-stopped
    profiles:
      - full
      - standard
      - minimal

  ipfs:
    image: ipfs/go-ipfs:latest
    environment:
      - IPFS_PROFILE=server
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfsdata:/data/ipfs
    networks:
      - oip-network
    profiles:
      - full
      - standard

  # Standard OIP service (for distributed deployments)
  oip:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "3005:3005"
      - "9229:9229"
    environment:
      - NODE_ENV=production
      - ELASTICSEARCH_HOST=${ELASTICSEARCHHOST}
      - ELASTICCLIENTUSERNAME=${ELASTICCLIENTUSERNAME}
      - ELASTICCLIENTPASSWORD=${ELASTICCLIENTPASSWORD}
    depends_on:
      - elasticsearch
    networks:
      - oip-network
    restart: unless-stopped
    profiles:
      - standard
      - minimal

  # Full monolithic OIP service (all services in one container)
  oip-full:
    build:
      context: .
      dockerfile: Dockerfile-full
    env_file:
      - .env
    ports:
      - "3005:3005"
      - "9229:9229"
      - "8081:8081"  # Text generator
      - "8082:8082"  # Speech synthesizer
      - "4040:4040"  # Ngrok dashboard
    environment:
      - NODE_ENV=production
      - ELASTICSEARCH_HOST=${ELASTICSEARCHHOST}
      - ELASTICCLIENTUSERNAME=${ELASTICCLIENTUSERNAME}
      - ELASTICCLIENTPASSWORD=${ELASTICCLIENTPASSWORD}
      - NGROK_AUTHTOKEN=${NGROK_AUTH_TOKEN}
    depends_on:
      - elasticsearch
    networks:
      - oip-network
    restart: unless-stopped
    profiles:
      - full

  # GPU-optimized OIP service (connects to external network)
  oip-gpu:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "3005:3005"
      - "9229:9229"
    volumes:
      - ./media/jfk:/usr/src/app/media/jfk
    environment:
      - NODE_ENV=production
      - ELASTICSEARCH_HOST=${ELASTICSEARCHHOST}
      - ELASTICCLIENTUSERNAME=${ELASTICCLIENTUSERNAME}
      - ELASTICCLIENTPASSWORD=${ELASTICCLIENTPASSWORD}
    networks:
      - existing-oip-network
    restart: unless-stopped
    profiles:
      - gpu
      - gpu-only

  # Self-hosted Speech Synthesizer (Coqui TTS) - for distributed deployments
  speech-synthesizer:
    build:
      context: ./speech-synthesizer
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    networks:
      - oip-network
    restart: unless-stopped
    profiles:
      - standard

  # GPU-enabled Speech Synthesizer (Coqui TTS with CUDA) - for GPU deployments
  speech-synthesizer-gpu:
    build:
      context: ./speech-synthesizer
      dockerfile: Dockerfile.gpu
    ports:
      - "8082:8082"
    networks:
      - oip-network
    restart: unless-stopped
    profiles:
      - gpu
      - full-gpu

  # Text generator for GPU machines - for distributed deployments
  text-generator:
    build: ./text-generator
    ports:
      - "8081:8081"
    networks:
      - oip-network
    restart: unless-stopped
    profiles:
      - full-gpu
      - gpu

  # Ngrok for public access - for distributed deployments
  ngrok:
    image: ngrok/ngrok
    command: http oip:3005
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTH_TOKEN}
    depends_on:
      - oip
    ports:
      - "4040:4040"
    networks:
      - oip-network
    restart: unless-stopped
    profiles:
      - standard

networks:
  oip-network:
    driver: bridge
    name: oiparweave_oip-network
  existing-oip-network:
    external: true
    name: oiparweave_oip-network

volumes:
  esdata:
  ipfsdata:
